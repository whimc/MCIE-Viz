{"version":3,"sources":["MCIE.png","Components/Chart.js","Components/TimeChart.js","App.js","registerServiceWorker.js","index.js"],"names":["BACKGROUND_COLOR","BORDER_COLOR","HOVER_BACKGROUND_COLOR","components","Bar","Pie","Doughnut","Radar","Chart","ChartType","this","props","type","ChartData","labels","datasets","label","data","backgroundColor","borderColor","hoverBackgroundColor","borderWidth","ChartOptions","maintainAspectRatio","scales","xAxisLabel","yAxisLabel","xAxes","scaleLabel","display","labelString","yAxes","className","React","createElement","Component","defaultProps","areaDatasets","datasetNames","getDatasets","JSON_data","ind","area","push","pointBackgroundColor","fill","pointHitRadius","pointHoverRadius","getData","area_data","setIndex","Date","pointClick","elements","block","elem","_datasetIndex","key","_index","breakActions","placeActions","minutes","points","header","breakString","Object","keys","length","placeString","alert","TimeChart","ticks","beginAtZero","stepSize","Line","getElementAtEvent","GENERAL_LABELS","LONG_MONTHS","SHORT_MONTHS","generalSelect","biomeSelect","fieldSelect","barSelect","pieSelect","donutSelect","lineSelect","getDate","timestamp","short","a","day","month","getMonth","year","getFullYear","hour","getHours","min","getMinutes","am_pm","substr","getDuration","startTime","endTime","decimal","toFixed","parseInt","getDurationOfSessions","sessions","total","forEach","session","parseFloat","App","state","SELECT","users_loading","users_disabled","users_data","users_selected","sessions_loading","sessions_disabled","sessions_data","sessions_selected","recentSessions_loading","recentSessions_disabled","recentSessions_data","recentSessions_selected","options_state","username","start_time","end_time","loaded","analysis_general","analysis_STEM_keys","analysis_STEM_values","analysis_STEM_times","analysis_STEM_selected_session","analysis_STEM_selected_info","analysis_biome_keys","analysis_biome_values","buttonStates","select_all","analysis_type","graph_type","generateButtonClick","bind","handleChangeUser","handleChangeSession","handleChangeRecentSession","handleSelectTimedSession","reloadPage","generateUserList","generateRecentSessions","hideAnalysis","document","getElementById","style","button","disabled","innerHTML","setState","logo","property","buttonID","isAnalysisButton","toggleButtonState","path","tempButtonStates","buttonInd","fetch","process","then","response","json","sort","b","nameA","toLowerCase","nameB","users","obj","value","userId","select_options","current_user_id","generateUserSessions","console","log","url","loginTime","duration","logoutTime","sessionId","values","map","join","user","sessionID","disableGenerateButton","loadingAnimation","recentSession","hideOptionsMenu","normalAnimation","showAnalysis","window","location","reload","generateOptionsClass","classNames","separatorClass","generalBtnClass","biomesBtnClass","fieldsBtnClass","generalClass","biomesClass","fieldsClass","barBtnClass","pieBtnClass","donutBtnClass","lineBtnClass","barClass","pieClass","donutClass","lineClass","src","id","alt","placeholder","options","removeSelected","closeOnSelect","onChange","isLoading","isDisabled","multi","onClick","selectButtonClick","selectAllButtonClick","clearable","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5135f318.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/MCIE.8580aa56.png\";","import React, { Component } from 'react';\r\nimport {Bar, Pie, Doughnut, Radar } from 'react-chartjs-2';\r\n\r\nconst { BACKGROUND_COLOR, BORDER_COLOR, HOVER_BACKGROUND_COLOR } = {\r\n    BACKGROUND_COLOR: [\r\n        'rgba(255, 99, 132, 0.5)',\r\n        'rgba(54, 162, 235, 0.5)',\r\n        'rgba(255, 206, 86, 0.5)',\r\n        'rgba(75, 192, 192, 0.5)',\r\n        'rgba(153, 102, 255, 0.5)',\r\n        'rgba(255, 159, 64, 0.5)'\r\n    ],\r\n    BORDER_COLOR: [\r\n        'rgba(255,99,132,1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)'\r\n    ],\r\n    HOVER_BACKGROUND_COLOR: [\r\n        'rgba(255, 99, 132, 0.7)',\r\n        'rgba(54, 162, 235, 0.7)',\r\n        'rgba(255, 206, 86, 0.7)',\r\n        'rgba(75, 192, 192, 0.7)',\r\n        'rgba(153, 102, 255, 0.7)',\r\n        'rgba(255, 159, 64, 0.7)'\r\n      ],\r\n}\r\nconst components = {\r\n    \"Bar\": Bar,\r\n    \"Pie\": Pie,\r\n    \"Doughnut\": Doughnut,\r\n    \"Radar\": Radar\r\n}\r\n\r\nclass Chart extends Component {\r\n    \r\n    static defaultProps = {\r\n        type: 'Bar',\r\n        label: 'Session',\r\n        maintainAspectRatio: false,\r\n        xAxisLabel: \"\",\r\n        yAxisLabel: \"\",\r\n        className: \"\",\r\n    }\r\n\r\n    render() {\r\n        const ChartType = this.props.type;\r\n        const ChartData = {\r\n            labels: this.props.labels,\r\n            datasets: [{\r\n                label: this.props.label,\r\n                data: this.props.data,\r\n                backgroundColor: BACKGROUND_COLOR,\r\n                borderColor: BORDER_COLOR,\r\n                hoverBackgroundColor: HOVER_BACKGROUND_COLOR,\r\n                borderWidth: 1,\r\n            }]\r\n        }\r\n        const ChartOptions = {\r\n            maintainAspectRatio: this.props.maintainAspectRatio,\r\n            scales: (this.props.xAxisLabel === \"\" && this.props.yAxisLabel === \"\") ? {} : {\r\n                xAxes: [{\r\n                    scaleLabel: {\r\n                        display: this.props.xAxisLabel !== \"\",\r\n                        labelString: this.props.xAxisLabel,\r\n                    },\r\n                }],\r\n                yAxes: [{\r\n                    scaleLabel: {\r\n                        display: this.props.yAxisLabel !== \"\",\r\n                        labelString: this.props.yAxisLabel,\r\n                    },\r\n                }]\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={\"chart \" + this.props.className}>\r\n                { React.createElement(components[ChartType], {'data': ChartData, 'options': ChartOptions}, '') }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst { BACKGROUND_COLOR, BORDER_COLOR } = {\r\n    BACKGROUND_COLOR: [\r\n        'rgba(255, 99, 132, 0.5)',\r\n        'rgba(54, 162, 235, 0.5)',\r\n        'rgba(255, 206, 86, 0.5)',\r\n        'rgba(75, 192, 192, 0.5)',\r\n        'rgba(153, 102, 255, 0.5)',\r\n        'rgba(255, 159, 64, 0.5)'\r\n    ],\r\n    BORDER_COLOR: [\r\n        'rgba(255,99,132,1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)'\r\n    ]\r\n}\r\n\r\nvar areaDatasets = {};\r\nvar datasetNames = {};\r\n\r\nfunction getDatasets(JSON_data) {\r\n    var datasets = [];\r\n    var ind = 0;\r\n\r\n    // var area = \"CIVE\"; // \r\n    for (var area in JSON_data) {\r\n        datasets.push({\r\n            label: area,\r\n            borderColor: BORDER_COLOR[ind],\r\n            backgroundColor: BACKGROUND_COLOR[ind],\r\n            pointBackgroundColor: 'rgb(255, 255, 255)',\r\n            fill: false,\r\n            pointHitRadius: 5,\r\n            pointHoverRadius: 5,\r\n            data: getData(JSON_data[area], ind),\r\n        });\r\n\r\n        datasetNames[ind] = area;\r\n\r\n        ind += 1;\r\n    }\r\n\r\n    return datasets;\r\n}\r\n\r\nfunction getData(area_data, setIndex) {\r\n    var data = [];\r\n    for (var ind in area_data) {\r\n\r\n        data.push({\r\n            't': new Date(area_data[ind]['minutes']),\r\n            'x': area_data[ind]['minutes'],\r\n            'y': area_data[ind]['points']\r\n        });\r\n\r\n        var key = setIndex + \"+\" + ind;\r\n        areaDatasets[key] = area_data[ind];\r\n    }\r\n\r\n    // data.sort(function(a, b) {\r\n    //     return a['x'] - b['x'];\r\n    // });\r\n\r\n    return data;\r\n}\r\n\r\nfunction pointClick(elements) {\r\n    if (!elements[0]) return;\r\n    \r\n    var elem = elements[0];\r\n\r\n    var setIndex = elem._datasetIndex;\r\n    var ind = elem._index;\r\n    \r\n    var key = setIndex + \"+\" + ind;\r\n    var breakActions = areaDatasets[key].breakActions;\r\n    var placeActions = areaDatasets[key].placeActions;\r\n    var minutes = areaDatasets[key]['minutes'];\r\n    var points = areaDatasets[key]['points'];\r\n\r\n    // console.log(\"Blocks broken: \", breakActions);\r\n    // console.log(\"Blocks placed: \", placeActions);\r\n\r\n    // TODO: Make this display in a better way.    \r\n    \r\n    var header = datasetNames[setIndex] + \" (\" + minutes + \", \" + points + \")\";\r\n    var breakString = \"Blocks broken:\\n\" + (Object.keys(breakActions).length === 0 ? \"None\\n\" : \"\");\r\n    var placeString = \"Blocks placed:\\n\" + (Object.keys(placeActions).length === 0 ? \"None\\n\" : \"\");\r\n\r\n    var block;\r\n    for (block in breakActions) {\r\n        breakString += \" - \" + breakActions[block] + \"x \" + block + \"\\n\";\r\n    }\r\n    for (block in placeActions) {\r\n        placeString += \" - \" + placeActions[block] + \"x \" + block + \"\\n\";\r\n    }\r\n\r\n    alert(header + \"\\n\\n\" + breakString + \"\\n\" + placeString);\r\n}\r\n\r\nclass TimeChart extends Component {\r\n    \r\n    static defaultProps = {\r\n        label: 'Session',\r\n        maintainAspectRatio: false,\r\n        className: \"\",\r\n    }\r\n\r\n    render() {\r\n\r\n        const ChartData = {\r\n            datasets: getDatasets(this.props.data)\r\n        }\r\n\r\n        const ChartOptions = {\r\n            maintainAspectRatio: this.props.maintainAspectRatio,\r\n            scales: {\r\n                xAxes: [{\r\n                    type: 'linear',\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        stepSize: 3,\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Time (Minutes)'\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Points'\r\n                    },\r\n                }]\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={\"chart \" + this.props.className}>\r\n                { React.createElement(Line, { 'data': ChartData, 'options': ChartOptions, getElementAtEvent: pointClick }, '') }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TimeChart;\r\n","import React, { Component } from 'react';\r\nimport logo from './MCIE.png';\r\nimport './App.css';\r\nimport Chart from './Components/Chart'\r\nimport TimeChart from './Components/TimeChart'\r\nimport classNames from 'classnames';\r\nimport Select from 'react-select';\r\n\r\n// const TEST_JSON = require('./TestJSON/latest_analysis.json');\r\n\r\nconst GENERAL_LABELS = [\"Blocks Traveled/10\", \"Blocks Placed\", \"Blocks Broken\", \"Chat Messages\", \"Commands\"];\r\n\r\nconst LONG_MONTHS = ['January','February','March','April','May','June','July','August','September','October','November','December'];\r\nconst SHORT_MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n\r\nconst generalSelect = \"general_select\", biomeSelect = \"biome_select\", fieldSelect = \"field_select\", allSelect = \"select_all\";\r\nconst barSelect = \"bar_select\", pieSelect = \"pie_select\", donutSelect = \"donut_select\", lineSelect = \"line_select\";\r\n\r\n/**\r\n * Gets a nicely formatted version of a timestamp\r\n * @param {*} timestamp Timestamp to get the time of.\r\n * @param {boolean} short Whether or not to give the short version of a month\r\n */\r\nfunction getDate(timestamp, short=false) {\r\n\r\n  if (timestamp < 0) {\r\n    return \"None\";\r\n  }\r\n\r\n  var a = new Date(timestamp * 1000);\r\n\r\n  var day = a.getDate();\r\n  var month = (short ? SHORT_MONTHS[a.getMonth()] : LONG_MONTHS[a.getMonth()]);\r\n  var year = a.getFullYear();\r\n  var hour = a.getHours() % 12;\r\n  if (hour === 0) hour = 12;\r\n  var min = \"0\" + a.getMinutes();\r\n  var am_pm = (a.getHours() >= 12) ? \"PM\" : \"AM\";\r\n\r\n  return month + ' ' + day + ' ' + year + ' ' + hour + ':' + min.substr(-2) + ' ' + am_pm;\r\n}\r\n\r\n/**\r\n * Gets the duration in minutes between two times\r\n * @param {*} startTime Start time (in seconds)\r\n * @param {*} endTime End time (in seconds)\r\n * @param {boolean} decimal Whether or not to show a decimal for the duration\r\n */\r\nfunction getDuration(startTime, endTime, decimal=false) {\r\n  var minutes = (endTime - startTime) / 60\r\n\r\n  if (decimal) return minutes.toFixed(2);\r\n  return parseInt(minutes, 10);\r\n}\r\n\r\nfunction getDurationOfSessions(sessions, decimal=false) {\r\n  var total = 0;\r\n  sessions.forEach((session) => {\r\n    total += parseFloat(getDuration(session.startTime, session.endTime, true))\r\n  })\r\n\r\n  if (decimal) return total.toFixed(2);\r\n  return parseInt(total, 10);\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n      SELECT: {\r\n        users_loading: true,\r\n        users_disabled: true,\r\n        users_data: [],\r\n        users_selected: '',\r\n\r\n        sessions_loading: false,\r\n        sessions_disabled: true,\r\n        sessions_data: [],\r\n        sessions_selected: [],\r\n\r\n        recentSessions_loading: true,\r\n        recentSessions_disabled: true,\r\n        recentSessions_data: [],\r\n        recentSessions_selected: '',\r\n      },\r\n      // Whether or not the options part is disabled\r\n      options_state: false,\r\n\r\n      // Username of user being analyzed\r\n      username: \"\",\r\n      // Start time of session being analyzed\r\n      start_time: 0,\r\n      // End time of session being analyzed\r\n      end_time: -1,\r\n      // Whether or not the analysis has loaded\r\n      loaded: false,\r\n      // 0: Blocks traveled (/10) | 1: Blocks placed | 2: Blocks broken | 3: Chat messages sent | 4: Commands sent\r\n      analysis_general: [],\r\n      // Keys for STEM areas\r\n      analysis_STEM_keys: [],\r\n      // Values for STEM areas\r\n      analysis_STEM_values: [],\r\n      // Whole \"sessionStemAreaTimes\" part of JSON file\r\n      analysis_STEM_times: {},\r\n      // Section of \"sessionStemAreaTimes\" that is currently selected\r\n      analysis_STEM_selected_session: {},\r\n      // Info about the selected session\r\n      analysis_STEM_selected_info: {},\r\n      // Keys for biomes\r\n      analysis_biome_keys: [],\r\n      // Values for biomes\r\n      analysis_biome_values: [],\r\n\r\n\r\n      // If each of these buttons is disabled\r\n      buttonStates: {\r\n\r\n        select_all: false,\r\n\r\n        analysis_type: {\r\n          'general_select': false,\r\n          'biome_select': true,\r\n          'field_select': true,\r\n        },\r\n\r\n        graph_type: {\r\n          'bar_select': false,\r\n          'pie_select': true,\r\n          'donut_select': true,\r\n          'line_select': true,\r\n        },\r\n      },\r\n    };\r\n\r\n    // Binding button click function to button click\r\n    this.generateButtonClick = this.generateButtonClick.bind(this);\r\n    this.handleChangeUser = this.handleChangeUser.bind(this);\r\n    this.handleChangeSession = this.handleChangeSession.bind(this);\r\n    this.handleChangeRecentSession = this.handleChangeRecentSession.bind(this);\r\n\r\n    this.handleSelectTimedSession = this.handleSelectTimedSession.bind(this);\r\n    this.reloadPage = this.reloadPage.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Hides the unloaded analysis parts until they're all loaded\r\n   */\r\n  componentDidMount() {\r\n    this.generateUserList();\r\n    this.generateRecentSessions();\r\n    this.hideAnalysis();\r\n  }\r\n\r\n  /**\r\n   * Shows analysis once they're all loaded\r\n   */\r\n  showAnalysis() {\r\n    var analysis = document.getElementById(\"analysis_data\");\r\n    analysis.style.display = \"block\";\r\n  }\r\n\r\n  /**\r\n   * Hides analysis div\r\n   */\r\n  hideAnalysis() {\r\n    var analysis = document.getElementById(\"analysis_data\");\r\n    analysis.style.display = \"none\";\r\n  }\r\n\r\n  /**\r\n   * Disables the generate button\r\n   */\r\n  disableGenerateButton() {\r\n    var button = document.getElementById(\"generate_button\");\r\n    button.disabled = true;\r\n    button.innerHTML = \"Loading...\";\r\n  }\r\n\r\n  /**\r\n   * Hides initial selection menu\r\n   */\r\n  hideOptionsMenu(){\r\n    this.setState({\r\n      options_state: true,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Makes logo do the normal animation\r\n   */\r\n  normalAnimation() {\r\n    var logo = document.getElementById(\"logo\");\r\n    var property = \"App-logo-spin-main infinite 1s alternate ease-in-out\";\r\n    logo.style['-webkit-animation'] = property;\r\n    logo.style['-moz-animation'] = property;\r\n    logo.style['-o-animation'] = property;\r\n    logo.style['animation'] = property;\r\n  }\r\n\r\n  /**\r\n   * Makes logo do the loading animation\r\n   */\r\n  loadingAnimation() {\r\n    var logo = document.getElementById(\"logo\");\r\n    var property = \"App-logo-spin-loading infinite 1s alternate ease-in-out\";\r\n    logo.style['-webkit-animation'] = property;\r\n    logo.style['-moz-animation'] = property;\r\n    logo.style['-o-animation'] = property;\r\n    logo.style['animation'] = property;\r\n  }\r\n\r\n  /**\r\n   * Handles clicking a select button\r\n   * @param {*} buttonID ID of the clicked button\r\n   */\r\n  selectButtonClick(buttonID, isAnalysisButton) {\r\n\r\n    // Toggle the button on / off\r\n    this.toggleButtonState(buttonID, isAnalysisButton);\r\n\r\n    // Handle the lines separating the different analyses\r\n    // var line1 = document.getElementById(\"line1\");\r\n    // var line2 = document.getElementById(\"line2\");\r\n\r\n    // var generalOn = !this.state.buttonStates.analysis_type[generalSelect];\r\n    // var biomeOn = !this.state.buttonStates.analysis_type[biomeSelect];\r\n    // var fieldOn = !this.state.buttonStates.analysis_type[fieldSelect];\r\n\r\n    // line1.style.display = \"none\";\r\n    // line2.style.display = \"none\";\r\n\r\n    // if (generalOn) {\r\n    //   if (biomeOn || fieldOn) line1.style.display = \"block\";\r\n    //   if (biomeOn && fieldOn) line2.style.display = \"block\";\r\n    // } else {\r\n    //   if (biomeOn && fieldOn) line2.style.display = \"block\";\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Toggles the state of a button between enabled/disabled\r\n   * @param {*} buttonID ID of the clicked button\r\n   */\r\n  toggleButtonState(buttonID, isAnalysisButton) {\r\n    var path = \"analysis_type\";\r\n    if (!isAnalysisButton) path = \"graph_type\";\r\n\r\n    var tempButtonStates = this.state.buttonStates;\r\n\r\n    if (this.state.buttonStates[allSelect]) {\r\n\r\n      tempButtonStates[allSelect] = false;\r\n      for (var buttonInd in tempButtonStates[\"analysis_type\"]) {\r\n        tempButtonStates[\"analysis_type\"][buttonInd] = true;\r\n      }\r\n      for (buttonInd in tempButtonStates[\"graph_type\"]) {\r\n        tempButtonStates[\"graph_type\"][buttonInd] = true;\r\n      }\r\n\r\n      if (isAnalysisButton) {\r\n        tempButtonStates[\"analysis_type\"][buttonID] = false;\r\n        tempButtonStates[\"graph_type\"][barSelect] = false;\r\n      } else {\r\n          tempButtonStates[\"graph_type\"][buttonID] = false;\r\n          if (buttonID === lineSelect) tempButtonStates[\"analysis_type\"][fieldSelect] = false;\r\n          else tempButtonStates[\"analysis_type\"][generalSelect] = false;\r\n      }\r\n\r\n      this.setState({buttonStates: tempButtonStates});\r\n      return;\r\n    }\r\n\r\n    // Make sure that the line graph is not selected for an analysis without one.\r\n    if (isAnalysisButton && buttonID !== fieldSelect && !this.state.buttonStates['graph_type'][lineSelect]) {\r\n      tempButtonStates['graph_type'][lineSelect] = true;\r\n      tempButtonStates['graph_type'][barSelect] = false;\r\n    }\r\n\r\n    for (buttonInd in tempButtonStates[path]) {\r\n      tempButtonStates[path][buttonInd] = true;\r\n    }\r\n\r\n    // tempButtonStates[path][buttonID] = !buttonOff;\r\n    tempButtonStates[path][buttonID] = false;\r\n\r\n    this.setState({buttonStates: tempButtonStates});\r\n  }\r\n\r\n  selectAllButtonClick() {\r\n    var tempButtonStates = this.state.buttonStates;\r\n    tempButtonStates[allSelect] = true;\r\n\r\n    for (var buttonInd in tempButtonStates[\"analysis_type\"]) {\r\n      tempButtonStates[\"analysis_type\"][buttonInd] = false;\r\n    }\r\n    for (buttonInd in tempButtonStates[\"graph_type\"]) {\r\n      tempButtonStates[\"graph_type\"][buttonInd] = false;\r\n    }\r\n\r\n    this.setState({buttonStates: tempButtonStates});\r\n  }\r\n\r\n  /**\r\n   * Generates a list of users for the dropdown select menu\r\n   */\r\n  generateUserList() {\r\n\r\n    var url = process.env.REACT_APP_GET_ALL_USERS_URL;\r\n\r\n    fetch(url).then(response => response.json()).then(data => {\r\n\r\n      data.sort(function(a, b) {\r\n        var nameA = a.username.toLowerCase(), nameB = b.username.toLowerCase();\r\n        if (nameA < nameB) {\r\n          return -1;\r\n        }\r\n        if (nameA > nameB) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n\r\n      var users = []\r\n      data.forEach(obj => {\r\n        users.push({\r\n          value: obj.userId,\r\n          label: obj.username,\r\n        })\r\n      });\r\n\r\n      var select_options = this.state.SELECT;\r\n      select_options.users_data = users;\r\n      this.setState({ SELECT: select_options });\r\n\r\n    }).then(() => {\r\n      var select_options = this.state.SELECT;\r\n      select_options.users_loading = false;\r\n      select_options.users_disabled = false;\r\n      this.setState({ SELECT: select_options })\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Handles when a user is selected\r\n   * @param {*} value Value of the selected user\r\n   */\r\n  handleChangeUser(value) {\r\n    if (this.state.SELECT.users_selected === value) return;\r\n\r\n    var select_options = this.state.SELECT;\r\n    if (value === null) value = '';\r\n\r\n    select_options.users_selected = value;\r\n    select_options.sessions_selected = [];\r\n    select_options.sessions_data = [];\r\n    select_options.sessions_disabled = true;\r\n\r\n    this.setState({\r\n        SELECT: select_options,\r\n        current_user_id: (value === '' ? -1 : value.value) }, () => {\r\n      this.generateUserSessions();\r\n    });\r\n\r\n    console.log(\"Selected user: \" + value.label)\r\n  }\r\n\r\n  /**\r\n   * Generates and populates the dropdown menu with a list of sessions for the given user\r\n   */\r\n  generateUserSessions() {\r\n    if (this.state.SELECT.users_selected === '') return;\r\n\r\n    var select_options = this.state.SELECT;\r\n    select_options.sessions_loading = true;\r\n    select_options.sessions_disabled = true;\r\n    this.setState({ SELECT: select_options });\r\n\r\n    var url = `${process.env.REACT_APP_GET_SESSIONS_URL}/${this.state.SELECT.users_selected.value}`;\r\n    fetch(url).then(response => response.json()).then(data => {\r\n\r\n      data.sort(function(a, b) {\r\n        return b.loginTime - a.loginTime;\r\n      })\r\n\r\n      var sessions = []\r\n      data.forEach(obj => {\r\n        var duration = getDuration(obj.loginTime, obj.logoutTime)\r\n        if (duration < 1) return;\r\n\r\n        sessions.push({\r\n          value: obj.sessionId,\r\n          label: getDate(obj.loginTime, true) + \" (\" + duration + \" mins)\",\r\n          startTime: obj.loginTime,\r\n          endTime: obj.logoutTime,\r\n        })\r\n      });\r\n\r\n      var select_options = this.state.SELECT;\r\n      select_options.sessions_data = sessions;\r\n      this.setState({ SELECT: select_options });\r\n\r\n    }).then(() => {\r\n      var select_options = this.state.SELECT;\r\n      select_options.sessions_loading = false;\r\n      select_options.sessions_disabled = false;\r\n      this.setState({ SELECT: select_options });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles selecting a session(s)\r\n   * @param {*} values Values of the selected session(s)\r\n   */\r\n  handleChangeSession(values) {\r\n    if (values === null) values = []\r\n    var select_options = this.state.SELECT;\r\n    select_options.sessions_selected = values;\r\n    this.setState({ SELECT: select_options });\r\n\r\n    console.log(\"Selected sessions: \" + values.map(a => a.label).join(\", \"));\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates a list of 20 most recent sessions for the dropdown menu\r\n   */\r\n  generateRecentSessions() {\r\n    var url = `${process.env.REACT_APP_GET_RECENT_SESSIONS_URL}/20`;\r\n\r\n    fetch(url).then(response => response.json()).then(data => {\r\n\r\n      var sessions = []\r\n      data.forEach(obj => {\r\n        var duration = getDuration(obj.loginTime, obj.logoutTime);\r\n        sessions.push({\r\n          value: obj.userId + \"+\" + obj.sessionId,\r\n          label: obj.username + \" \" + getDate(obj.loginTime, true) + \" (\" + duration + \" mins)\",\r\n          user: {\r\n            value: obj.userId,\r\n            label: obj.username,\r\n          },\r\n          session: {\r\n            value: obj.sessionId,\r\n            label: getDate(obj.loginTime, true) + \" (\" + duration + \" mins)\",\r\n            startTime: obj.loginTime,\r\n            endTime: obj.logoutTime,\r\n          },\r\n        })\r\n      });\r\n\r\n      var select_options = this.state.SELECT;\r\n      select_options.recentSessions_data = sessions;\r\n      this.setState({ SELECT: select_options });\r\n\r\n    }).then(() => {\r\n      var select_options = this.state.SELECT;\r\n      select_options.recentSessions_loading = false;\r\n      select_options.recentSessions_disabled = false;\r\n      this.setState({ SELECT: select_options })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles selecting a recent session\r\n   * @param {*} value Value of the selected item\r\n   */\r\n  handleChangeRecentSession(value) {\r\n\r\n    if (this.state.SELECT.recentSessions_selected === value) return;\r\n\r\n    var select_options = this.state.SELECT;\r\n    if (value === null) value = '';\r\n\r\n    select_options.recentSessions_selected = value;\r\n\r\n    this.setState({ SELECT: select_options });\r\n\r\n    console.log(\"Selected recent session: \" + value.label);\r\n    console.log(\"  \" + value.value)\r\n  }\r\n\r\n  /**\r\n   * Handles selecting which session to show the timed analysis of\r\n   * @param {*} value Value of the selected item\r\n   */\r\n  handleSelectTimedSession(value) {\r\n    var sessionID = value.value;\r\n    this.setState({\r\n      analysis_STEM_selected_session: this.state.analysis_STEM_times[sessionID],\r\n      analysis_STEM_selected_info: {\r\n        value: sessionID,\r\n        label: value.label,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves analysis as a JSON file and displays it\r\n   */\r\n  generateButtonClick() {\r\n\r\n    if ((this.state.SELECT.users_selected === '' || this.state.SELECT.sessions_selected.length === 0) && this.state.SELECT.recentSessions_selected === '') {\r\n      alert(\"Please select a user id and session(s)!\")\r\n      return;\r\n    }\r\n\r\n    var url = `${process.env.REACT_APP_GET_ANALYSIS_BY_SESSION}/`;\r\n    if (this.state.SELECT.recentSessions_selected !== '') {\r\n      url += this.state.SELECT.recentSessions_selected.value;\r\n    } else {\r\n      url += this.state.SELECT.users_selected.value + \"+\" + this.state.SELECT.sessions_selected.map(a => a.value).join(\"+\");\r\n    }\r\n\r\n    this.disableGenerateButton();\r\n    this.loadingAnimation();\r\n    fetch(url).then(response => response.json()).then(data => {\r\n      if (this.state.SELECT.recentSessions_selected !== '') {\r\n\r\n        var recentSession = this.state.SELECT.recentSessions_selected;\r\n        var select_options = this.state.SELECT;\r\n\r\n        select_options.users_selected = recentSession.user;\r\n        select_options.sessions_selected = [recentSession.session];\r\n        this.setState({ SELECT: select_options });\r\n\r\n      }\r\n      this.setState({\r\n        username: data[\"username\"],\r\n        start_time: data[\"startTime\"],\r\n        end_time: data[\"endTime\"],\r\n        loaded: true,\r\n        analysis_general: [\r\n          // data[\"blocksTraveled\"]/10,\r\n          (data[\"distanceTraveled\"]/10).toFixed(2),\r\n          data[\"blocksPlaced\"],\r\n          data[\"blocksBroken\"],\r\n          data[\"chatMessages\"],\r\n          data[\"commands\"]\r\n        ],\r\n        // analysis_STEM_keys: Object.keys(data[\"stemAreas\"]),\r\n        // analysis_STEM_values: Object.values(data[\"stemAreas\"]),\r\n        analysis_STEM_keys: Object.keys(data[\"stemAreaPoints\"]),\r\n        analysis_STEM_values: Object.values(data[\"stemAreaPoints\"]),\r\n\r\n        // analysis_STEM_times: data[\"areaTimes\"],\r\n        analysis_STEM_times: data[\"sessionStemAreaTimes\"],\r\n        analysis_STEM_selected_info: this.state.SELECT.sessions_selected[0],\r\n        analysis_STEM_selected_session: data[\"sessionStemAreaTimes\"][this.state.SELECT.sessions_selected[0].value],\r\n\r\n        analysis_biome_keys: Object.keys(data[\"biomeTimes\"]),\r\n        analysis_biome_values: Object.values(data[\"biomeTimes\"]),\r\n      });\r\n    }).then(() => {\r\n      this.hideOptionsMenu();\r\n      this.normalAnimation();\r\n      this.showAnalysis();\r\n    });\r\n\r\n// FOR TESTING\r\n// this.setState({\r\n//   username: TEST_JSON[\"username\"],\r\n//   start_time: TEST_JSON[\"startTime\"],\r\n//   end_time: TEST_JSON[\"endTime\"],\r\n//   loaded: true,\r\n//   analysis_general: [\r\n//     TEST_JSON[\"blocksTraveled\"]/10,\r\n//     TEST_JSON[\"blocksPlaced\"],\r\n//     TEST_JSON[\"blocksBroken\"],\r\n//     TEST_JSON[\"chatMessages\"],\r\n//     TEST_JSON[\"commands\"]\r\n//   ],\r\n//   analysis_STEM_keys: Object.keys(TEST_JSON[\"stemAreas\"]),\r\n//   analysis_STEM_values: Object.values(TEST_JSON[\"stemAreas\"]),\r\n//   analysis_STEM_times: TEST_JSON[\"areaTimes\"],\r\n//   analysis_biome_keys: Object.keys(TEST_JSON[\"biomeTimes\"]),\r\n//   analysis_biome_values: Object.values(TEST_JSON[\"biomeTimes\"]),\r\n// });\r\n// this.hideGenerateButton();\r\n// this.normalAnimation();\r\n// this.showAnalysis();\r\n\r\n  }\r\n\r\n  /**\r\n   * Reloads the page\r\n   * We use this to reset everything and go back to the main selecting screen\r\n   */\r\n  reloadPage() {\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    var generateOptionsClass = classNames({\r\n      \"disabledDiv\": this.state.options_state,\r\n    })\r\n    var separatorClass = classNames({\r\n      \"disabledDiv\": !this.state.buttonStates[allSelect],\r\n    });\r\n\r\n    var generalBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.analysis_type[generalSelect],\r\n    });\r\n    var biomesBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.analysis_type[biomeSelect],\r\n    });\r\n    var fieldsBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.analysis_type[fieldSelect],\r\n    });\r\n\r\n    var generalClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.analysis_type[generalSelect],\r\n    });\r\n    var biomesClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.analysis_type[biomeSelect],\r\n    });\r\n    var fieldsClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.analysis_type[fieldSelect],\r\n    });\r\n\r\n    var barBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.graph_type[barSelect]\r\n    });\r\n    var pieBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.graph_type[pieSelect]\r\n    });\r\n    var donutBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.graph_type[donutSelect]\r\n    });\r\n    var lineBtnClass = classNames({\r\n      \"myButton\": true,\r\n      \"disabledButton\": this.state.buttonStates.graph_type[lineSelect]\r\n    });\r\n\r\n    var barClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.graph_type[barSelect]\r\n    });\r\n    var pieClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.graph_type[pieSelect]\r\n    });\r\n    var donutClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.graph_type[donutSelect]\r\n    });\r\n    var lineClass = classNames({\r\n      \"disabledDiv\": this.state.buttonStates.graph_type[lineSelect]\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" id=\"logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Minecraft Interest Engine</h1>\r\n        </header>\r\n\r\n        {/* First screen -- selecting which user and which session to analyze */}\r\n        <div className={generateOptionsClass}>\r\n          <div className=\"selectors\">\r\n\r\n            {/* Dropdown for selecting a user */}\r\n            <Select className=\"custom-select\"\r\n              placeholder=\"Select a user\"\r\n              options={ this.state.SELECT.users_data }\r\n              value={ this.state.SELECT.users_selected }\r\n              removeSelected={false}\r\n              closeOnSelect={true}\r\n              onChange={ this.handleChangeUser }\r\n              isLoading={ this.state.SELECT.users_loading }\r\n              isDisabled={ this.state.SELECT.users_disabled }\r\n            />\r\n\r\n            {/* Dropdown for selecting one or more sessions */}\r\n            <Select className=\"custom-select\"\r\n              multi={true}\r\n              placeholder=\"Select one or more sessions\"\r\n              options={ this.state.SELECT.sessions_data }\r\n              value={ this.state.SELECT.sessions_selected }\r\n              removeSelected={true}\r\n              closeOnSelect={false}\r\n              onChange={ this.handleChangeSession }\r\n              isLoading={ this.state.SELECT.sessions_loading }\r\n              isDisabled={ this.state.SELECT.sessions_disabled }\r\n            />\r\n\r\n            <hr/>\r\n\r\n            {/* Dropdown for selecting from recent sessions */}\r\n            <Select className=\"custom-select\"\r\n              placeholder=\"Select from the 20 most recent sessions\"\r\n              options={ this.state.SELECT.recentSessions_data }\r\n              value={ this.state.SELECT.recentSessions_selected }\r\n              removeSelected={false}\r\n              closeOnSelect={true}\r\n              onChange={ this.handleChangeRecentSession }\r\n              isLoading={ this.state.SELECT.recentSessions_loading }\r\n              isDisabled={ this.state.SELECT.recentSessions_disabled }\r\n            />\r\n\r\n          </div>\r\n\r\n          {/* Button to generate analysis */}\r\n          <div>\r\n            <button id=\"generate_button\" onClick={this.generateButtonClick} className=\"myButton\">\r\n              Generate Analysis\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Second screen -- showing entire analysis */}\r\n        <div className=\"analysis\" id=\"analysis_data\">\r\n\r\n          <div>\r\n            <button onClick={this.reloadPage} className=\"myButton reloadButton\">\r\n              Back to Home\r\n            </button>\r\n          </div>\r\n\r\n          <h3>{this.state.username}'s Summary:</h3>\r\n          <div className=\"summary\">\r\n            <p><b>Start Time:</b> {getDate(this.state.start_time)}</p>\r\n            <p><b>End Time:</b> {this.state.end_time < 0 ? \"Now\" : getDate(this.state.end_time)}</p>\r\n            <p><b>Total Duration:</b> {getDurationOfSessions(this.state.SELECT.sessions_selected, true)} minutes</p>\r\n            <p><b>Distance Traveled:</b> {(this.state.analysis_general[0]*10).toFixed(2)}</p>\r\n            <p><b>Blocks Placed:</b> {this.state.analysis_general[1]}</p>\r\n            <p><b>Blocks Broken:</b> {this.state.analysis_general[2]}</p>\r\n            <p><b>Messages Sent:</b> {this.state.analysis_general[3]}</p>\r\n            <p><b>Commands Sent:</b> {this.state.analysis_general[4]}</p>\r\n            <Select className=\"custom-select\"\r\n              placeholder={\"Analyzed Sessions (\" + this.state.SELECT.sessions_selected.length + \")\"}\r\n              options={ this.state.SELECT.sessions_selected }\r\n              closeOnSelect={false}\r\n            />\r\n          </div>\r\n\r\n          <hr/>\r\n\r\n          <div>\r\n            <h4>Choose which analysis to show and with which graph</h4>\r\n          </div>\r\n\r\n          {/* Buttons for selecting which sections of the analysis to show */}\r\n          <div className=\"selectButtons\">\r\n            <div className=\"innerButton\"><button className={generalBtnClass}\r\n              onClick={ () => this.selectButtonClick(generalSelect, true)}>General Actions</button></div>\r\n\r\n            <div className=\"innerButton\"><button className={biomesBtnClass}\r\n              onClick={ () => this.selectButtonClick(biomeSelect, true)}>Biome Statistics</button></div>\r\n\r\n            <div className=\"innerButton\"><button className={fieldsBtnClass}\r\n              onClick={ () => this.selectButtonClick(fieldSelect, true)}>Field Analysis</button></div>\r\n\r\n            <div className=\"innerButton\"><button className=\"myButton\" disabled={this.state.buttonStates[allSelect]}\r\n              onClick={ () => this.selectAllButtonClick()}><b>Select All</b></button></div>\r\n          </div>\r\n\r\n          {/* Buttons for selecting which types of graphs to show */}\r\n          <div className=\"selectButtons\">\r\n            <div className=\"innerButton\"><button className={barBtnClass}\r\n              onClick={ () => this.selectButtonClick(barSelect, false)}>Bar Graph</button></div>\r\n\r\n            <div className=\"innerButton\"><button className={pieBtnClass}\r\n              onClick={ () => this.selectButtonClick(pieSelect, false)}>Pie Chart</button></div>\r\n\r\n            <div className=\"innerButton\"><button className={donutBtnClass}\r\n              onClick={ () => this.selectButtonClick(donutSelect, false)}>Donut Chart</button></div>\r\n\r\n            <div className=\"innerButton\"><button className={lineBtnClass} disabled={this.state.buttonStates.analysis_type[fieldSelect]}\r\n              onClick={ () => this.selectButtonClick(lineSelect, false)}>Line Graph</button></div>\r\n          </div>\r\n\r\n\r\n          {/* Analysis of general actions */}\r\n          <div className={generalClass}>\r\n            <h3>General Action Statistics</h3>\r\n            <div className=\"chart-container\">\r\n              <Chart type='Bar' className={barClass} labels={GENERAL_LABELS} data={this.state.analysis_general} />\r\n              <Chart type='Pie' className={pieClass} labels={GENERAL_LABELS} data={this.state.analysis_general} />\r\n              <Chart type='Doughnut' className={donutClass} labels={GENERAL_LABELS} data={this.state.analysis_general} />\r\n            </div>\r\n          </div>\r\n\r\n          {/* By default, this separator is disabled */}\r\n          <hr className={separatorClass}/>\r\n\r\n          {/* Statistics of biome times */}\r\n          <div className={biomesClass}>\r\n            <h3>Biome Statistics</h3>\r\n            <div className=\"chart-container\">\r\n              <Chart type='Bar' className={barClass} labels={this.state.analysis_biome_keys} data={this.state.analysis_biome_values} yAxisLabel='Time (Seconds)'/>\r\n              <Chart type='Pie' className={pieClass} labels={this.state.analysis_biome_keys} data={this.state.analysis_biome_values} />\r\n              <Chart type='Doughnut' className={donutClass} labels={this.state.analysis_biome_keys} data={this.state.analysis_biome_values} />\r\n            </div>\r\n          </div>\r\n\r\n          {/* By default, this separator is disabled */}\r\n          <hr className={separatorClass}/>\r\n\r\n          {/* Analysis of STEM fields */}\r\n          <div className={fieldsClass}>\r\n            <h3>STEM Field Analysis</h3>\r\n            <div className=\"chart-container\">\r\n              <Chart type='Bar' className={barClass} labels={this.state.analysis_STEM_keys} data={this.state.analysis_STEM_values} yAxisLabel='Points'/>\r\n              <Chart type='Pie' className={pieClass} labels={this.state.analysis_STEM_keys} data={this.state.analysis_STEM_values} />\r\n              <Chart type='Doughnut' className={donutClass} labels={this.state.analysis_STEM_keys} data={this.state.analysis_STEM_values} />\r\n\r\n              <h4 className={lineClass}>Click on a point to see what blocks were placed/broken</h4>\r\n              <h4 className={lineClass}>Select which session to see the graph of</h4>\r\n\r\n{/* <Select className=\"custom-select\"\r\n              multi={true}\r\n              placeholder=\"Select one or more sessions\"\r\n              options={ this.state.SELECT.sessions_data }\r\n              value={ this.state.SELECT.sessions_selected }\r\n              removeSelected={true}\r\n              closeOnSelect={false}\r\n              onChange={ this.handleChangeSession }\r\n              isLoading={ this.state.SELECT.sessions_loading }\r\n              disabled={ this.state.SELECT.sessions_disabled }\r\n            /> */}\r\n\r\n              <Select\r\n                className={classNames({\r\n                  \"custom-select\": true,\r\n                  \"disabledDiv\": this.state.buttonStates.graph_type[lineSelect]\r\n                })}\r\n                placeholder={\"Analyzed Sessions (\" + this.state.SELECT.sessions_selected.length + \")\"}\r\n                options={ this.state.SELECT.sessions_selected }\r\n                value={ this.state.analysis_STEM_selected_info }\r\n                closeOnSelect={true}\r\n                clearable={false}\r\n                onChange={ this.handleSelectTimedSession }\r\n              />\r\n              <TimeChart className={lineClass} data={this.state.analysis_STEM_selected_session} />\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"bottom\">\r\n          <footer className=\"App-footer\">\r\n            <p className=\"App-ending\">&#169; Copyright 2021 WHIMC</p>\r\n          </footer>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}